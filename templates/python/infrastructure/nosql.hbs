from adapter.repository.nosql import NoSQL, NoSQLSession
from typing import Any, Dict, Optional, TypeVar, List

T = TypeVar("T")

class BaseNoSQL(NoSQL):
    def __init__(self, connection_string: str, options: Optional[Any] = None):
        self._connection_string = connection_string
        self._options = options

    async def connect(self) -> None:
        # データベース接続の実装をお願いします。
        pass

    async def disconnect(self) -> None:
        # データベース切断の実装をお願いします。
        pass

    async def store(self, ctx: Any, collection: str, data: T) -> None:
        # データ保存の実装をお願いします。
        pass

    async def update(self, ctx: Any, collection: str, filter: Dict[str, Any], update: Dict[str, Any]) -> None:
        # データ更新の実装をお願いします。
        pass

    async def find_all(self, ctx: Any, collection: str, filter: Dict[str, Any]) -> List[T]:
        # 複数件取得の実装をお願いします。
        pass

    async def find_one(
        self,
        ctx: Any,
        collection: str,
        filter: Dict[str, Any],
        options: Optional[Dict[str, Any]] = None
    ) -> Optional[T]:
        # 1件取得の実装をお願いします。
        pass

    async def start_session(self) -> NoSQLSession:
        # セッション開始の実装をお願いします。
        pass


class BaseNoSQLSession(NoSQLSession):
    async def with_transaction(self, fn: Any) -> None:
        # トランザクション実行の実装をお願いします。
        pass

    def end_session(self, ctx: Any) -> None:
        # セッション終了の実装をお願いします。
        pass
