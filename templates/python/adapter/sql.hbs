from typing import Optional
from uuid import UUID

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, Session

from ..domain.entity import {{entityName}}
from ..domain.repository import {{repositoryName}}Repository
from ..infrastructure.sql import {{sqlImplName}}

class {{name}}:
    def __init__(self, connection_string: str):
        self._engine = create_engine(connection_string)
        self._Session = sessionmaker(bind=self._engine)
        self._repository: {{repositoryName}}Repository = {{sqlImplName}}(self._Session())

    def save(self, entity: {{entityName}}) -> None:
        with self._Session() as session:
            self._repository = {{sqlImplName}}(session)
            self._repository.save(entity)

    def find_by_id(self, id: UUID) -> Optional[{{entityName}}]:
        with self._Session() as session:
            self._repository = {{sqlImplName}}(session)
            return self._repository.find_by_id(id)

    def find_all(self) -> list[{{entityName}}]:
        with self._Session() as session:
            self._repository = {{sqlImplName}}(session)
            return self._repository.find_all()

    def delete(self, id: UUID) -> None:
        with self._Session() as session:
            self._repository = {{sqlImplName}}(session)
            self._repository.delete(id) 