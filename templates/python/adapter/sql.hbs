from typing import Any, List, Protocol, Optional

class Rows(Protocol):
    def next(self) -> bool:
        ...

    def scan(self, *dest: Any) -> None:
        ...

    def err(self) -> Optional[Exception]:
        ...

    def close(self) -> None:
        ...


class Row(Protocol):
    def scan(self, *dest: Any) -> None:
        ...


class Tx(Protocol):
    async def execute(self, ctx: Any, query: str, *args: Any) -> None:
        ...

    async def query(self, ctx: Any, query: str, *args: Any) -> Rows:
        ...

    async def query_row(self, ctx: Any, query: str, *args: Any) -> Row:
        ...

    async def commit(self) -> None:
        ...

    async def rollback(self) -> None:
        ...


class SQL(Protocol):
    async def execute(self, ctx: Any, query: str, *args: Any) -> None:
        ...

    async def query(self, ctx: Any, query: str, *args: Any) -> Rows:
        ...

    async def query_row(self, ctx: Any, query: str, *args: Any) -> Row:
        ...

    async def begin_transaction(self, ctx: Any) -> Tx:
        ...
