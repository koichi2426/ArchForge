from typing import TypeVar, Generic, List, Optional, Any, Callable, Dict, Protocol

T = TypeVar("T")

class NoSQL(Protocol):
    async def store(self, ctx: Any, collection: str, data: T) -> None:
        ...

    async def update(self, ctx: Any, collection: str, filter: Dict[str, Any], update: Dict[str, Any]) -> None:
        ...

    async def find_all(self, ctx: Any, collection: str, filter: Dict[str, Any]) -> List[T]:
        ...

    async def find_one(
        self,
        ctx: Any,
        collection: str,
        filter: Dict[str, Any],
        options: Optional[Dict[str, Any]] = None
    ) -> Optional[T]:
        ...

    async def start_session(self) -> "NoSQLSession":
        ...


class NoSQLSession(Protocol):
    async def with_transaction(self, fn: Callable[[Any], Any]) -> None:
        ...

    def end_session(self, ctx: Any) -> None:
        ...
