{% for imp in imports %}
from {{ imp.from_ }} import {{ imp.name }}
{% endfor %}

# 入力ポート
class {{ inputInterface.name }}:
    def __init__(self{% for field in inputInterface.fields %}, {{ field.name }}: {{ field.type }}{% endfor %}):
{% for field in inputInterface.fields %}
        self.{{ field.name }} = {{ field.name }}
{% endfor %}

# 出力ポート
class {{ outputInterface.name }}:
    def __init__(self{% for field in outputInterface.fields %}, {{ field.name }}: {{ field.type }}{% endfor %}):
{% for field in outputInterface.fields %}
        self.{{ field.name }} = {{ field.name }}
{% endfor %}

# プレゼンター（出力ポート変換）
class {{ presenter.name }}:
    def output(self, {{ presenter.inputArg }}: {{ presenter.inputType }}) -> {{ outputInterface.name }}:
        pass  # 実装を追加してください

# ユースケースインターフェース（入力ポート）
class {{ usecaseInterface.name }}(Protocol):
    async def execute(self, input: {{ inputInterface.name }}) -> {{ outputInterface.name }}:
        ...
        
# ファクトリ関数
def {{ factoryFunction.name }}(
    repo: {{ repository.type }},
    presenter: {{ presenter.name }}
) -> {{ usecaseInterface.name }}:
    return {{ interactor.name }}(repo, presenter)

# ユースケース本体
class {{ interactor.name }}({{ usecaseInterface.name }}):
    def __init__(self, repository: {{ repository.type }}, presenter: {{ presenter.name }}):
        self.repository = repository
        self.presenter = presenter

    async def execute(self, input: {{ inputInterface.name }}) -> {{ outputInterface.name }}:
        pass  # 実装を追加してください
