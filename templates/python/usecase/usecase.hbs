from abc import ABC, abstractmethod
from typing import List, Optional
from uuid import UUID

from ..domain.entity import {{entityName}}
from ..domain.repository import {{repositoryName}}Repository
from ..domain.domain_service import {{domainServiceName}}Service

class {{name}}UseCase(ABC):
    def __init__(
        self,
        repository: {{repositoryName}}Repository,
        domain_service: {{domainServiceName}}Service
    ):
        self._repository = repository
        self._domain_service = domain_service

    @abstractmethod
    def execute(self, input_data: dict) -> dict:
        """
        ユースケースの実行ロジックを実装
        """
        pass

    def _find_entity(self, id: UUID) -> Optional[{{entityName}}]:
        return self._repository.find_by_id(id)

    def _save_entity(self, entity: {{entityName}}) -> None:
        self._repository.save(entity)

    def _find_all_entities(self) -> List[{{entityName}}]:
        return self._repository.find_all()

    def _delete_entity(self, id: UUID) -> None:
        self._repository.delete(id)

    def _execute_domain_service(self, entities: List[{{entityName}}]) -> None:
        self._domain_service.execute(entities) 